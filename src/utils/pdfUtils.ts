import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';

/**
 * Generates a PDF from a HTML element
 * @param element The HTML element to convert to PDF
 * @param filename The filename for the downloaded PDF
 */
export const generatePDF = async (element: HTMLElement, filename: string = 'timetable.pdf'): Promise<void> => {
  try {
    // Show loading indicator or message
    const loadingElement = document.createElement('div');
    loadingElement.style.position = 'fixed';
    loadingElement.style.top = '50%';
    loadingElement.style.left = '50%';
    loadingElement.style.transform = 'translate(-50%, -50%)';
    loadingElement.style.padding = '20px';
    loadingElement.style.borderRadius = '10px';
    loadingElement.style.background = 'rgba(0,0,0,0.7)';
    loadingElement.style.color = 'white';
    loadingElement.style.zIndex = '9999';
    loadingElement.innerText = 'Generating PDF...';
    document.body.appendChild(loadingElement);

    // Create a clone of the element to avoid modifying the original
    const clone = element.cloneNode(true) as HTMLElement;
    clone.style.width = '1800px'; // Increased width further to ensure all columns are visible
    clone.style.overflow = 'visible';

    // Ensure days column doesn't overlap with content
    const dayColumns = clone.querySelectorAll('.day-col');
    dayColumns.forEach((col) => {
      const dayCol = col as HTMLElement;
      dayCol.style.position = 'relative';
      dayCol.style.left = 'auto';
      dayCol.style.width = '100px';
      dayCol.style.minWidth = '100px';
    });

    // Ensure all time slots have equal width
    const slots = clone.querySelectorAll('.col:not(.day-col)');
    slots.forEach((slot) => {
      const timeSlot = slot as HTMLElement;
      timeSlot.style.minWidth = '160px';
      timeSlot.style.width = '100%';
    });

    // Temporarily add the clone to the body but make it invisible
    clone.style.position = 'absolute';
    clone.style.left = '-9999px';
    clone.classList.add('pdf-mode');
    document.body.appendChild(clone);

    console.log("PDF generation: clone dimensions", {
      width: clone.offsetWidth,
      height: clone.offsetHeight
    });

    // Creating PDF with higher quality and proper dimensions
    const canvas = await html2canvas(clone, {
      scale: 1.5,
      useCORS: true,
      logging: true, // Enable logging for debugging
      backgroundColor: '#1a1a1a',
      allowTaint: true,
      width: 1800, // Match the clone width 
      height: clone.offsetHeight,
      windowWidth: 1800
    });

    console.log("Canvas dimensions:", {
      width: canvas.width,
      height: canvas.height
    });

    // Use A2 landscape for even more width
    const pdf = new jsPDF({
      orientation: 'landscape',
      unit: 'mm',
      format: 'a2' // Larger format for more space
    });

    // Calculate dimensions to fit the entire table
    const imgWidth = pdf.internal.pageSize.getWidth();
    const imgHeight = (canvas.height * imgWidth) / canvas.width;

    const imgData = canvas.toDataURL('image/png');
    pdf.addImage(imgData, 'PNG', 0, 0, imgWidth, imgHeight);

    // Add metadata
    pdf.setProperties({
      title: 'Schedulr Timetable',
      subject: 'Timetable generated by Schedulr',
      creator: 'Schedulr App',
      author: 'Schedulr'
    });

    // Add footer with generation time
    const date = new Date().toLocaleString();
    pdf.setFontSize(8);
    pdf.setTextColor(100, 100, 100);
    pdf.text(`Generated on ${date} by Schedulr`, pdf.internal.pageSize.getWidth() / 2, pdf.internal.pageSize.getHeight() - 10, {
      align: 'center'
    });

    // Download PDF
    pdf.save(filename);

    // Clean up
    document.body.removeChild(loadingElement);
    document.body.removeChild(clone);
  } catch (error) {
    console.error('Error generating PDF:', error);
    alert('Failed to generate PDF. Please try again.');
  }
};
